(require 'package)
(package-initialize)
(package-refresh-contents)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Specify my elisp lib dir
(add-to-list 'load-path "~/.emacs.d/lisp")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Setup Cask
(require 'cask "~/.cask/cask.el")
(cask-initialize)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; save my desktop, and ignore some types, files are
;; specified using regular expressions, \\ is needed to escape
(desktop-save-mode 1)
(setq desktop-buffers-not-to-save
      (concat "\\COMMIT_EDITMSG\\'")) ;; Ignore git commit messages

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; load theme
(load-theme 'zenburn t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; make sure that marked text is highlighted
(transient-mark-mode t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; follow symlinks to version controlled files without confirmation
(setq vc-follow-symlinks t)

;; mouse support in osx terminal
(require 'mouse)
(xterm-mouse-mode t)
(defun track-mouse (e))
(global-set-key [mouse-4] '(lambda ()
                             (interactive)
                             (scroll-down 1)))
(global-set-key [mouse-5] '(lambda ()
                             (interactive)
                             (scroll-up 1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; When a file has a hard link the backup file will be a copy as
;; opposed to renaming the original file
(setq backup-by-copying-when-linked t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; highlight 100 characters on each line
(require 'fill-column-indicator)
(setq fci-rule-width 1)
(setq fci-rule-color "#000000")
(setq-default fci-rule-column 100)
; enable fci by default for everything
(define-globalized-minor-mode global-fci-mode fci-mode (lambda () (fci-mode 1)))
(global-fci-mode 1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; I like tabs of 4 chars
(custom-set-variables '(tab-width 4))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; use only spaces, no tab charaters
(setq-default indent-tabs-mode nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; font size for graphical displays
(set-face-attribute 'default nil :height 140)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; line number mode*
(require 'linum)
(global-linum-mode 1)
(setq linum-format "%d ")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Highlight current line
(require 'hl-line)
(global-hl-line-mode 1)
(set-face-attribute hl-line-face nil :inherit nil :underline "lightgrey")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; flycheck stuff
(require 'flycheck)

(flycheck-define-checker python-mypy-ledona
  "Ledona custom Mypy syntax and type checker, same as default except no following checking. Requires mypy>=0.580.

See URL `http://mypy-lang.org/'."
  :command ("mypy"
            "--show-column-numbers"
            (config-file "--config-file" flycheck-python-mypy-ini)
            (option "--cache-dir" flycheck-python-mypy-cache-dir)
            source-original)
  :error-patterns
  ((error line-start (file-name) ":" line (optional ":" column)
          ": error:" (message) line-end)
   (warning line-start (file-name) ":" line (optional ":" column)
            ": warning:" (message) line-end))
  :modes python-mode
  ;; Ensure the file is saved, to work around
  ;; https://github.com/python/mypy/issues/4746.
  :predicate flycheck-buffer-saved-p)

;; add the new checker to the end of the list
(push 'python-mypy-ledona (cdr (last flycheck-checkers)))

(add-hook 'after-init-hook #'global-flycheck-mode)
(setq flycheck-flake8-maximum-line-length 999)
(flycheck-add-next-checker 'python-pylint 'python-mypy-ledona)
(flycheck-add-next-checker 'python-flake8 'python-pylint)
(global-set-key [f10] 'flycheck-previous-error)
(global-set-key [f11] 'flycheck-next-error)
(custom-set-variables
 '(flycheck-check-syntax-automatically (quote (idle-change mode-enabled)))
 '(flycheck-idle-change-delay 10)
 '(flycheck-python-mypy-ini "mypy.ini")
 )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; AUTOCOMPLETE
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; magit shortcut (for git support)
(require 'magit)
(global-set-key (kbd "\C-c m") 'magit-status)
; disable fci
(add-hook 'magit-mode-hook (lambda ()
                             (fci-mode 0)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; whitespace customizations
(require 'whitespace)
(global-whitespace-mode 1)
(setq whitespace-style '(face trailing tabs empty))
(setq whitespace-line-column 100)
;; cleanup whitespace in buffer
(global-set-key (kbd "\C-c w") 'whitespace-cleanup)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; disable menubar
(menu-bar-mode -1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; json cleanup
(global-set-key (kbd "C-c C-j") 'json-pretty-print)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ido
(ido-mode t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; web mode
;; (require 'web-mode)
;; (setq web-mode-enable-current-column-highlight t)
;; (setq web-mode-enable-current-element-highlight t)
;; (set-face-attribute 'web-mode-html-tag-face                  nil :foreground "#509090")
;; (set-face-attribute 'web-mode-html-tag-bracket-face          nil :foreground "#505050")
;; (set-face-attribute 'web-mode-html-attr-name-face            nil :foreground "#90b099")
;; (set-face-attribute 'web-mode-html-attr-equal-face           nil :foreground "#505050")
;; (set-face-attribute 'web-mode-current-column-highlight-face  nil :background "#3E3C36")
;; (set-face-attribute 'web-mode-current-element-highlight-face nil :background "#3E3C36")
;; (set-face-attribute 'web-mode-block-control-face             nil :foreground "#AF0000")
;; (set-face-attribute 'web-mode-block-delimiter-face           nil :foreground "#AF0000")
;; (set-face-attribute 'web-mode-comment-face                   nil :foreground "#909090")
;; (set-face-attribute 'web-mode-error-face                     nil :background "#900000")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; map some files to their mode
(add-to-list 'auto-mode-alist '("\\dot_emacs\\'" . emacs-lisp-mode))
(add-to-list 'auto-mode-alist '("\\dot_bash_.*\\'" . shell-script-mode))
(add-to-list 'auto-mode-alist '("\\.*\.sc\\'" . shell-script-mode))
(add-to-list 'auto-mode-alist '("\\.*\.js\\'" . rjsx-mode))
;; (add-to-list 'auto-mode-alist '("\\.*\.py\\'" . sphinx-doc-mode))
;; the following handles jinja2 templates
(add-to-list 'auto-mode-alist '("\\.*\\.html\\'" . web-mode))
(setq web-mode-engines-alist
      '(("django" . "/templates/.*\\.html\\'"))
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; jshint - This is a modification of the web-mode-jshint that can
;;          that will pop up and run write output to the message buffer,
;;          and uses --extract=always . Always is needed to ensure extraction
;;          for templates.
;;          Overwrites the C-c C-j binding.
;;          TODO: the overlay-put is not working for some reason

(defun web-mode-jshint-always ()
  "Run JSHint on all the JavaScript parts."
  (interactive)
  (let (proc lines)
    (setq web-mode-jshint-errors 0)
    (when (buffer-file-name)
      (message (concat "\nrunning jshint on " (buffer-file-name))
      (setq proc (start-process
                  "jshint-proc"
                  nil
                  (executable-find "jshint")
                  "--extract=always"
                  (buffer-file-name)))
      (set-process-filter proc
                          (lambda (proc output)
                            (let ((offset 0) overlay pos (old 0) msg)
                              (remove-overlays (point-min) (point-max) 'font-lock-face 'web-mode-error-face)
                              (while (string-match
                                      "line \\([[:digit:]]+\\), col \\([[:digit:]]+\\), \\(.+\\)\\.$"
                                      output offset)
                                (setq web-mode-jshint-errors (1+ web-mode-jshint-errors))
                                (setq offset (match-end 0))
                                (setq pos (web-mode-coord-position
                                           (match-string-no-properties 1 output)
                                           (match-string-no-properties 2 output)))
                                (when (get-text-property pos 'tag-beg)
                                  (setq pos (1- pos)))
                                (when (not (= pos old))
                                  (setq old pos)
                                  (setq overlay (make-overlay pos (1+ pos)))
                                  (overlay-put overlay 'font-lock-warning-face 'web-mode-error-face)
                                  )
                                (setq msg (or (overlay-get overlay 'help-echo)
                                               (concat "line="
                                                       (match-string-no-properties 1 output)
                                                       " column="
                                                       (match-string-no-properties 2 output)
                                                       )))
                                (setq full-msg (concat
                                                (number-to-string web-mode-jshint-errors)
                                                ". " msg " ## "
                                                (match-string-no-properties 3 output)))
                                (overlay-put overlay 'help-echo full-msg)
                                (message full-msg)
                                ) ;while
                              ))
                          )
      )) ;when
    )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; enable kill ring to interact clipboard. On OSX do:
;; (require 'pbcopy)
;;
;; on Ubuntu do:
;; (require 'xclip)
;; (setq xclip-mode 1)
;; ANSIBLE CLIPBOARD INSERT BELOW

;;;;;;;;;;;;;; python stuff
;; jedi for auto complete with doc string
(add-hook 'python-mode-hook 'jedi:setup)


(global-set-key (kbd "\C-c j") 'web-mode-jshint-always)

(provide '.emacs)
;;; .emacs ends here
